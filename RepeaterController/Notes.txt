Get-PnpDevice -PresentOnly | Where-Object { $_.InstanceId -match '^USB' }


(make sure to deploy linux-arm64 for 64 bit ARM device)
dotnet publish RepeaterController.csproj -r linux-arm64 -c debug --self-contained true
dotnet publish C:\Users\Rhysdan\source\repos\RepeaterController\RepeaterController\RepeaterController.csproj -r linux-arm64 -c debug --self-contained true
then tar publish directory
sftp pi@192.168.8.206 repeaterController.tar
put repeaterController.tar

(on pi side)
tar -xvf repeaterController.tar -C ~/repeaterController 

For libusb, must create symlink (libusb must already be installed, e.g., sudo apt-get install libusb-1.0)
It should then show up in place like /usr/lib/aarch64-linux-gnu/libusb-1.0.so

Serial number of the device can be found like: lsusb -v -d 16c0:05df
Linux seems to have a different vendor and product id, only enumerating in hexadecimal format

In order for LibUsbRelayService to work a symlink must be created:
cd /usr/lib/aarch64-linux-gnu/
sudo ln -s libusb-1.0.so.0 libusb-1.0.so


ls /dev/*i2c*
i2cdetect -y 1


raspi-gpio get --> prints the state of all GPIO pins
raspi-gpio get X --> prints the state of GPIO pin X
raspi-gpio set X --> op sets GPIO pin X as an output
raspi-gpio set X --> dh sets GPIO pin X to drive high
raspi-gpio set X --> dl sets GPIO pin X to drive low

192.168.8.1



https://do1alx.de/2022/anytone-factory-settings-mode/
https://do1alx.de/2022/reverse-engineering-radios-arm-binary-images-in-ida-pro/
https://chirp.danplanet.com/attachments/6117/20201023_anytone778uv.py


GPIO Serial Comm:
https://forums.raspberrypi.com/viewtopic.php?t=244528


DTMF Relay:
https://radionut53.wixsite.com/radionut63/4-channel-dtmf-controller-info
https://5a03fba3-885f-47e3-9177-617d26f1f22f.filesusr.com/ugd/10abc6_76661cbc8af244d4987ecc9f2b9adef9.pdf